<常量说明> ::= e 
<变量> ::= <标识符>    
<变量> ::= <标识符>
<标识符表> ::= <变量>
<标识符表> ::= <变量>, <标识符表>
<变量定义> ::= <标识符表>:<类型>;
<变量> ::= <标识符>
<变量> ::= <标识符>
<变量> ::= <标识符>
<标识符表> ::= <变量>
<标识符表> ::= <变量>, <标识符表>
<标识符表> ::= <变量>, <标识符表>
<变量定义> ::= <标识符表>:<类型>;<变量定义>
<变量> ::= <标识符>
<标识符表> ::= <变量>
<变量定义> ::= <标识符表>:<类型>;<变量定义>
<变量说明> ::= var  <变量定义>
<布尔量> ::= <标识符>
<布尔因子> ::= <布尔量>
<布尔项> ::= <布尔因子>
<布尔表达式> ::= <布尔项>
<I_F> ::=  if <布尔表达式> then
*****************BackPatch 1,3
<变量> ::= <标识符>
常数算数量
<因子> ::= <算术量>
<项> ::= <因子>
<算术表达式> ::= <项>
<表达式> ::= <算术表达式>
<赋值语句> ::= <变量>:=<表达式>
<简单句> ::= <赋值语句>
<执行语句> ::= <简单句>
<I_F_E> ::= <I_F> <执行语句> else
*****************BackPatch 2,5
<变量> ::= <标识符>
常数算数量
<因子> ::= <算术量>
<项> ::= <因子>
<算术表达式> ::= <项>
<表达式> ::= <算术表达式>
<赋值语句> ::= <变量>:=<表达式>    
<简单句> ::= <赋值语句>
<执行语句> ::= <简单句>
<if语句> ::= <I_F_E> <执行语句>
<结构句> ::= <if语句>
<执行语句> ::= <结构句>
*****************BackPatch 4,7
<语句表> ::= <执行语句>
<复合句> ::= begin <语句表> end
<分程序> ::= <常量说明><变量说明><复合句>.
<程序> ::= program <标识符>;<分程序>

Analysis end.

QuarterList output:
NO.   0 (         ,       ,       , -    )
NO.   1 (      jnz,      a,       ,      3 )
NO.   2 (        j,       ,       ,      5 )
NO.   3 (       :=,      2,       ,      x )
NO.   4 (        j,       ,       ,      7 )
NO.   5 (     I->B,      3,       ,     T0 )
NO.   6 (       :=,     T0,       ,      a )
NO.   7 (     Stop,       ,       ,      0 )
 Addr.   name              type
   1         a           bool
   2         d           bool
   3         b           integer
   4         c           integer
   5         e           integer
   6         x           integer  
   7         2           integer
   8         3           integer
   9        T0           bool
DATA SEGMENT
    TAB DW 9 DUP(?)
    Temp db '0000H','$'
    DATA ENDS
CODE SEGMENT
    ASSUME CS:CODE,DS:DATA

    START:
    MOV AX,DATA
    MOV DS,AX
NO1:
    MOV AX, TAB[0]
    CMP AX,0
    JNZ NO3
NO2:
    JMP NO5
NO3:
    MOV AX, 2
    MOV TAB[10], AX
NO4:
    JMP NO7
NO5:
    MOV AX, 3
    AND AX, 0001H
    MOV TAB[16], AX
NO6:
    MOV AX, TAB[16]
    MOV TAB[0], AX
NO7:
    MOV CX, 9
    MOV SI, 0

AGAIN:
    MOV AX,TAB[SI]
    CALL PrintAX
    CALL PRINTHC
    INC SI
    INC SI
    LOOP AGAIN
NO0:
    MOV AH,4CH
    INT 21H
PrintAX proc
    PUSH CX
    PUSH SI
    jmp Next


Next:
    mov si,offset Temp+3;保存存储结果的字符串的最后一个字符偏移地址
    xor cx,cx           ;对cX清零
    mov cl,4            ;设置循环次数为4次

MainPart:
    mov DH,AL           ;将Al的内容传送给DH

    shr AX,1
    shr AX,1
    shr AX,1
    shr AX,1
                ;上述4句为使AX逻辑右移4位 理论上可以写成 shr AX ,cl(cl设置为4)
                ;但这个地方cl要记录循环次数每次循环会是cl-1所以无法满足正常的移位需要
    and dh,0FH
    add dh,30H
    cmp dh,':'  ;':'的ASCII比9大1 而字母的ASCII码与数字的ASCII码中间隔了7个其它字符
    ja isLetter ;如果为字母则跳转
    jb No       ;如果不是

isLetter:
    add dh,7H   ;ASCII码加7变为字母
No:
    mov [si],dh ;将字符存入,待存放内容的字符串的对应位置

    dec si      ;待存放内容的内存地址自减1
loop MainPart

print:
    mov dx,offset Temp  ;将带打印的字符串的偏移地址存放进dx中
    mov ah,09           ;设置DOS 09号功能
    int 21H         ;功能调用

    POP SI
    POP CX

    ret
PrintAX endp


PRINTHC proc
    MOV DL, 10
    MOV AH, 2
    INT 21H
    RET
PRINTHC ENDP
    CODE ENDS
    END START
