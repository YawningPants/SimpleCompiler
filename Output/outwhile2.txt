<常量说明> ::= e 
<变量> ::= <标识符>    
<变量> ::= <标识符>
<变量> ::= <标识符>
<变量> ::= <标识符>
<标识符表> ::= <变量>
<标识符表> ::= <变量>, <标识符表>
<标识符表> ::= <变量>, <标识符表>
<标识符表> ::= <变量>, <标识符表>
<变量定义> ::= <标识符表>:<类型>;
<变量> ::= <标识符>
<变量> ::= <标识符>
<变量> ::= <标识符>
<标识符表> ::= <变量>
<标识符表> ::= <变量>, <标识符表>
<标识符表> ::= <变量>, <标识符表>
<变量定义> ::= <标识符表>:<类型>;<变量定义>
<变量说明> ::= var  <变量定义>
<变量> ::= <标识符>
常数算数量
<因子> ::= <算术量>
<项> ::= <因子>
<算术表达式> ::= <项>
<表达式> ::= <算术表达式>
<赋值语句> ::= <变量>:=<表达式>
<简单句> ::= <赋值语句>
<执行语句> ::= <简单句>
<变量> ::= <标识符>
常数算数量
<因子> ::= <算术量>
<项> ::= <因子>
<算术表达式> ::= <项>
<表达式> ::= <算术表达式>
<赋值语句> ::= <变量>:=<表达式>
<简单句> ::= <赋值语句>
<执行语句> ::= <简单句>
<变量> ::= <标识符>
常数算数量
<因子> ::= <算术量>
<项> ::= <因子>
<算术表达式> ::= <项>
<表达式> ::= <算术表达式>
<赋值语句> ::= <变量>:=<表达式>
<简单句> ::= <赋值语句>
<执行语句> ::= <简单句>
<变量> ::= <标识符>
常数算数量
<因子> ::= <算术量>
<项> ::= <因子>
<算术表达式> ::= <项>
<表达式> ::= <算术表达式>
<赋值语句> ::= <变量>:=<表达式>
<简单句> ::= <赋值语句>
<执行语句> ::= <简单句>
<变量> ::= <标识符>
常数算数量
<因子> ::= <算术量>
<项> ::= <因子>
<算术表达式> ::= <项>
<表达式> ::= <算术表达式>
<赋值语句> ::= <变量>:=<表达式>
<简单句> ::= <赋值语句>
<执行语句> ::= <简单句>
<变量> ::= <标识符>
常数算数量
<因子> ::= <算术量>
<项> ::= <因子>
<算术表达式> ::= <项>
<表达式> ::= <算术表达式>
<赋值语句> ::= <变量>:=<表达式>
<简单句> ::= <赋值语句>
<执行语句> ::= <简单句>
<W> := while
标识符算数量
<因子> ::= <算术量>
<项> ::= <因子>
<算术表达式> ::= <项>
<关系符> ::= <
标识符算数量
<因子> ::= <算术量>
<项> ::= <因子>
<算术表达式> ::= <项>
<布尔量> ::= (<算术表达式><关系符><算术表达式>)
<布尔因子> ::= <布尔量>
<布尔项> ::= <布尔因子>
*****************BackPatch 7,9
标识符算数量
<因子> ::= <算术量>
<项> ::= <因子>
<算术表达式> ::= <项>
<关系符> ::= <
标识符算数量
<因子> ::= <算术量>
<项> ::= <因子>
<算术表达式> ::= <项>
<布尔量> ::= (<算术表达式><关系符><算术表达式>)
<布尔因子> ::= <布尔量>
<布尔项> ::= <布尔项> and <布尔因子>
<布尔表达式> ::= <布尔项>
<WD> := <W><布尔表达式>
*****************BackPatch 9,11
标识符算数量
<因子> ::= <算术量>
<项> ::= <因子>
<算术表达式> ::= <项>
<关系符> ::= <
标识符算数量
<因子> ::= <算术量>
<项> ::= <因子>
<算术表达式> ::= <项>
<布尔量> ::= (<算术表达式><关系符><算术表达式>)
<布尔因子> ::= <布尔量>
<布尔项> ::= <布尔因子>
<布尔表达式> ::= <布尔项>
<I_F> ::=  if <布尔表达式> then
*****************BackPatch 11,13
<变量> ::= <标识符>
标识符算数量
<因子> ::= <算术量>
<项> ::= <因子>
<算术表达式> ::= <项>
常数算数量
<因子> ::= <算术量>
<项> ::= <因子>
<算术表达式> ::= <算术表达式>+<项>
<表达式> ::= <算术表达式>
<赋值语句> ::= <变量>:=<表达式>
<简单句> ::= <赋值语句>
<执行语句> ::= <简单句>
<if语句> ::= <I_F> <执行语句>
<结构句> ::= <if语句>
<执行语句> ::= <结构句>
*****************BackPatch 12,15
<变量> ::= <标识符>
标识符算数量
<因子> ::= <算术量>
<项> ::= <因子>
<算术表达式> ::= <项>
常数算数量
<因子> ::= <算术量>
<项> ::= <因子>
<算术表达式> ::= <算术表达式>+<项>
<表达式> ::= <算术表达式>
<赋值语句> ::= <变量>:=<表达式>
<简单句> ::= <赋值语句>
<执行语句> ::= <简单句>
<语句表> ::= <执行语句>   
<语句表> ::= <执行语句>;<语句表>
<复合句> ::= begin <语句表> end
<结构句> ::= <复合句>
<执行语句> ::= <结构句>
*****************BackPatch 0,17
<while语句> ::= <WD> do <执行语句>
*****************BackPatch 0,7
<结构句> ::= <while语句>
<执行语句> ::= <结构句>
*****************BackPatch 10,18
<语句表> ::= <执行语句>
<语句表> ::= <执行语句>;<语句表>
<语句表> ::= <执行语句>;<语句表>
<语句表> ::= <执行语句>;<语句表>
<语句表> ::= <执行语句>;<语句表>
<语句表> ::= <执行语句>;<语句表>
<语句表> ::= <执行语句>;<语句表>
<复合句> ::= begin <语句表> end
<分程序> ::= <常量说明><变量说明><复合句>.
<程序> ::= program <标识符>;<分程序>

Analysis end.

QuarterList output:
NO.   0 (         ,       ,       , -    )
NO.   1 (       :=,      3,       ,      a )
NO.   2 (       :=,      4,       ,      b )
NO.   3 (       :=,      1,       ,      c )
NO.   4 (       :=,     10,       ,      d )
NO.   5 (       :=,      0,       ,      x )
NO.   6 (       :=,      5,       ,      y )
NO.   7 (       j<,      a,      b,      9 )
NO.   8 (        j,       ,       ,     18 )
NO.   9 (       j<,      c,      d,     11 )
NO.  10 (        j,       ,       ,     18 )
NO.  11 (       j<,      x,      y,     13 )
NO.  12 (        j,       ,       ,     15 )
NO.  13 (     Int+,      x,      1,     T0 )
NO.  14 (       :=,     T0,       ,      x )
NO.  15 (     Int+,      c,      1,     T1 )
NO.  16 (       :=,     T1,       ,      c )
NO.  17 (        j,       ,       ,      7 )
NO.  18 (     Stop,       ,       ,      0 )
 Addr.   name              type
   1         a           integer
   2         b           integer
   3         c           integer
   4         d           integer
   5         x           integer
   6         y           integer  
   7         z           integer
   8         3           integer
   9         4           integer
  10         1           integer
  11        10           integer
  12         0           integer
  13         5           integer
  14        T0           integer
  15        T1           integer
DATA SEGMENT
    TAB DW 15 DUP(?)
    Temp db '0000H','$'
    DATA ENDS
CODE SEGMENT
    ASSUME CS:CODE,DS:DATA

    START:
    MOV AX,DATA
    MOV DS,AX
NO1:
    MOV AX, 3
    MOV TAB[0], AX
NO2:
    MOV AX, 4
    MOV TAB[2], AX
NO3:
    MOV AX, 1
    MOV TAB[4], AX
NO4:
    MOV AX, 10
    MOV TAB[6], AX
NO5:
    MOV AX, 0
    MOV TAB[8], AX
NO6:
    MOV AX, 5
    MOV TAB[10], AX
NO7:
    MOV AX, TAB[0]
    CMP AX, TAB[2]
    JL NO9
NO8:
    JMP NO18
NO9:
    MOV AX, TAB[4]
    CMP AX, TAB[6]
    JL NO11
NO10:
    JMP NO18
NO11:
    MOV AX, TAB[8]
    CMP AX, TAB[10]
    JL NO13
NO12:
    JMP NO15
NO13:
    MOV AX, TAB[8]
    ADD AX, 1
    MOV TAB[26], AX
NO14:
    MOV AX, TAB[26]
    MOV TAB[8], AX
NO15:
    MOV AX, TAB[4]
    ADD AX, 1
    MOV TAB[28], AX
NO16:
    MOV AX, TAB[28]
    MOV TAB[4], AX
NO17:
    JMP NO7
NO18:
    MOV CX, 15
    MOV SI, 0

AGAIN:
    MOV AX,TAB[SI]
    CALL PrintAX
    CALL PRINTHC
    INC SI
    INC SI
    LOOP AGAIN
NO0:
    MOV AH,4CH
    INT 21H
PrintAX proc
    PUSH CX
    PUSH SI
    jmp Next


Next:
    mov si,offset Temp+3;保存存储结果的字符串的最后一个字符偏移地址
    xor cx,cx           ;对cX清零
    mov cl,4            ;设置循环次数为4次

MainPart:
    mov DH,AL           ;将Al的内容传送给DH

    shr AX,1
    shr AX,1
    shr AX,1
    shr AX,1
                ;上述4句为使AX逻辑右移4位 理论上可以写成 shr AX ,cl(cl设置为4)
                ;但这个地方cl要记录循环次数每次循环会是cl-1所以无法满足正常的移位需要
    and dh,0FH
    add dh,30H
    cmp dh,':'  ;':'的ASCII比9大1 而字母的ASCII码与数字的ASCII码中间隔了7个其它字符
    ja isLetter ;如果为字母则跳转
    jb No       ;如果不是

isLetter:
    add dh,7H   ;ASCII码加7变为字母
No:
    mov [si],dh ;将字符存入,待存放内容的字符串的对应位置

    dec si      ;待存放内容的内存地址自减1
loop MainPart

print:
    mov dx,offset Temp  ;将带打印的字符串的偏移地址存放进dx中
    mov ah,09           ;设置DOS 09号功能
    int 21H         ;功能调用

    POP SI
    POP CX

    ret
PrintAX endp


PRINTHC proc
    MOV DL, 10
    MOV AH, 2
    INT 21H
    RET
PRINTHC ENDP
    CODE ENDS
    END START
