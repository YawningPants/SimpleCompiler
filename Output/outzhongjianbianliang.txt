<常量说明> ::= e 
<变量> ::= <标识符>    
<变量> ::= <标识符>
<变量> ::= <标识符>
<变量> ::= <标识符>
<标识符表> ::= <变量>
<标识符表> ::= <变量>, <标识符表>
<标识符表> ::= <变量>, <标识符表>
<标识符表> ::= <变量>, <标识符表>
<变量定义> ::= <标识符表>:<类型>;
<变量> ::= <标识符>
<变量> ::= <标识符>
<变量> ::= <标识符>
<标识符表> ::= <变量>
<标识符表> ::= <变量>, <标识符表>
<标识符表> ::= <变量>, <标识符表>
<变量定义> ::= <标识符表>:<类型>;<变量定义>
<变量> ::= <标识符>
<变量> ::= <标识符>
<标识符表> ::= <变量>
<标识符表> ::= <变量>, <标识符表>
<变量定义> ::= <标识符表>:<类型>;<变量定义>
<变量> ::= <标识符>
<标识符表> ::= <变量>
<变量定义> ::= <标识符表>:<类型>;<变量定义>
<变量说明> ::= var  <变量定义>
<变量> ::= <标识符>
标识符算数量
<因子> ::= <算术量>
<项> ::= <因子>
<算术表达式> ::= <项>
<表达式> ::= <算术表达式>
<赋值语句> ::= <变量>:=<表达式>
<简单句> ::= <赋值语句>
<执行语句> ::= <简单句>
<变量> ::= <标识符>
标识符算数量
<因子> ::= <算术量>
<项> ::= <因子>
<算术表达式> ::= <项>
<表达式> ::= <算术表达式>
<赋值语句> ::= <变量>:=<表达式>
<简单句> ::= <赋值语句>
<执行语句> ::= <简单句>
<变量> ::= <标识符>
标识符算数量
<因子> ::= <算术量>
<项> ::= <因子>
<算术表达式> ::= <项>
<表达式> ::= <算术表达式>
<赋值语句> ::= <变量>:=<表达式>
<简单句> ::= <赋值语句>
<执行语句> ::= <简单句>
<变量> ::= <标识符>
标识符算数量
<因子> ::= <算术量>
<项> ::= <因子>
<算术表达式> ::= <项>
<表达式> ::= <算术表达式>
<赋值语句> ::= <变量>:=<表达式>
<简单句> ::= <赋值语句>
<执行语句> ::= <简单句>
<变量> ::= <标识符>
标识符算数量
<因子> ::= <算术量>
<项> ::= <因子>
<算术表达式> ::= <项>
<表达式> ::= <算术表达式>
<赋值语句> ::= <变量>:=<表达式>
<简单句> ::= <赋值语句>
<执行语句> ::= <简单句>
<变量> ::= <标识符>
标识符算数量
<因子> ::= <算术量>
<项> ::= <因子>
<算术表达式> ::= <项>
<表达式> ::= <算术表达式>
<赋值语句> ::= <变量>:=<表达式>
<简单句> ::= <赋值语句>
<执行语句> ::= <简单句>
<变量> ::= <标识符>
标识符算数量
<因子> ::= <算术量>
<项> ::= <因子>
<算术表达式> ::= <项>
<表达式> ::= <算术表达式>
<赋值语句> ::= <变量>:=<表达式>
<简单句> ::= <赋值语句>
<执行语句> ::= <简单句>
<变量> ::= <标识符>
标识符算数量
<因子> ::= <算术量>
<项> ::= <因子>
<算术表达式> ::= <项>
<表达式> ::= <算术表达式>
<赋值语句> ::= <变量>:=<表达式>
<简单句> ::= <赋值语句>
<执行语句> ::= <简单句>
<变量> ::= <标识符>
标识符算数量
<因子> ::= <算术量>
<项> ::= <因子>
<算术表达式> ::= <项>
<表达式> ::= <算术表达式>
<赋值语句> ::= <变量>:=<表达式>
<简单句> ::= <赋值语句>
<执行语句> ::= <简单句>
<变量> ::= <标识符>
标识符算数量
<因子> ::= <算术量>
<项> ::= <因子>
<算术表达式> ::= <项>
<表达式> ::= <算术表达式>
<赋值语句> ::= <变量>:=<表达式>
<简单句> ::= <赋值语句>
<执行语句> ::= <简单句>
<变量> ::= <标识符>
标识符算数量
<因子> ::= <算术量>
<项> ::= <因子>
<算术表达式> ::= <项>
<表达式> ::= <算术表达式>
<赋值语句> ::= <变量>:=<表达式>
<简单句> ::= <赋值语句>
<执行语句> ::= <简单句>
<变量> ::= <标识符>
标识符算数量
<因子> ::= <算术量>
<项> ::= <因子>
<算术表达式> ::= <项>
<表达式> ::= <算术表达式>
<赋值语句> ::= <变量>:=<表达式>
<简单句> ::= <赋值语句>
<执行语句> ::= <简单句>
<变量> ::= <标识符>
标识符算数量
<因子> ::= <算术量>
<项> ::= <因子>
<算术表达式> ::= <项>
<表达式> ::= <算术表达式>
<赋值语句> ::= <变量>:=<表达式>
<简单句> ::= <赋值语句>
<执行语句> ::= <简单句>
<变量> ::= <标识符>
标识符算数量
<因子> ::= <算术量>
<项> ::= <因子>
<算术表达式> ::= <项>
<表达式> ::= <算术表达式>
<赋值语句> ::= <变量>:=<表达式>
<简单句> ::= <赋值语句>
<执行语句> ::= <简单句>
<变量> ::= <标识符>
标识符算数量
<因子> ::= <算术量>
<项> ::= <因子>
<算术表达式> ::= <项>
<表达式> ::= <算术表达式>
<赋值语句> ::= <变量>:=<表达式>
<简单句> ::= <赋值语句>
<执行语句> ::= <简单句>
<变量> ::= <标识符>
标识符算数量
<因子> ::= <算术量>
<项> ::= <因子>
<算术表达式> ::= <项>
<表达式> ::= <算术表达式> 
<赋值语句> ::= <变量>:=<表达式>
<简单句> ::= <赋值语句>
<执行语句> ::= <简单句>
<语句表> ::= <执行语句>
<语句表> ::= <执行语句>;<语句表>
<语句表> ::= <执行语句>;<语句表>
<语句表> ::= <执行语句>;<语句表>
<语句表> ::= <执行语句>;<语句表>
<语句表> ::= <执行语句>;<语句表>
<语句表> ::= <执行语句>;<语句表>
<语句表> ::= <执行语句>;<语句表>
<语句表> ::= <执行语句>;<语句表>
<语句表> ::= <执行语句>;<语句表>
<语句表> ::= <执行语句>;<语句表>
<语句表> ::= <执行语句>;<语句表>
<语句表> ::= <执行语句>;<语句表>
<语句表> ::= <执行语句>;<语句表>
<语句表> ::= <执行语句>;<语句表>
<语句表> ::= <执行语句>;<语句表>
<复合句> ::= begin <语句表> end
<分程序> ::= <常量说明><变量说明><复合句>.
<程序> ::= program <标识符>;<分程序>

Analysis end.

QuarterList output:
NO.   0 (         ,       ,       , -    )
NO.   1 (       :=,      a,       ,      a )
NO.   2 (     R->I,     ra,       ,     T0 )
NO.   3 (       :=,     T0,       ,      a )
NO.   4 (     B->I,     fa,       ,     T1 )
NO.   5 (       :=,     T1,       ,      a )
NO.   6 (     C->I,    str,       ,     T2 )
NO.   7 (       :=,     T2,       ,      a )
NO.   8 (     I->R,      a,       ,     T3 )
NO.   9 (       :=,      a,       ,     ra )
NO.  10 (       :=,     ra,       ,     ra )
NO.  11 (     B->R,     fa,       ,     T4 )
NO.  12 (       :=,     T4,       ,     ra )
NO.  13 (     C->R,    str,       ,     T5 )
NO.  14 (       :=,     T5,       ,     ra )
NO.  15 (     I->B,      a,       ,     T6 )
NO.  16 (       :=,     T6,       ,     fa )
NO.  17 (     R->B,     ra,       ,     T7 )
NO.  18 (       :=,     T7,       ,     fa )
NO.  19 (       :=,     fa,       ,     fa )
NO.  20 (     C->B,    str,       ,    T10 )
NO.  21 (       :=,    T10,       ,     fa )
NO.  22 (     I->C,      a,       ,    T11 )
NO.  23 (       :=,    T11,       ,    str )
NO.  24 (     R->C,     ra,       ,    T12 )
NO.  25 (       :=,    T12,       ,    str )
NO.  26 (     B->C,     fa,       ,    T13 )
NO.  27 (       :=,    T13,       ,    str )
NO.  28 (       :=,    str,       ,    str )
NO.  29 (     Stop,       ,       ,      0 )
 Addr.   name              type
   1         a           integer
   2         b           integer
   3         c           integer
   4         d           integer
   5        ra           real
   6        rb           real
   7        rc           real
   8        fa           bool
   9        fb           bool
  10       str           char
  11        T0           integer
  12        T1           integer
  13        T2           integer
  14        T3           real
  15        T4           real     
  16        T5           real
  17        T6           bool
  18        T7           bool
  19       T10           bool
  20       T11           char
  21       T12           char
  22       T13           char
DATA SEGMENT
    TAB DW 22 DUP(?)
    Temp db '0000H','$'
    DATA ENDS
CODE SEGMENT
    ASSUME CS:CODE,DS:DATA

    START:
    MOV AX,DATA
    MOV DS,AX
NO1:
    MOV AX, TAB[0]
    MOV TAB[0], AX
NO2:
    MOV AX, TAB[8]
    MOV BX, 100
    IDIV BX
    MOV TAB[20], AX
NO3:
    MOV AX, TAB[20]
    MOV TAB[0], AX
NO4:
    MOV AX, TAB[14]
    MOV TAB[22], AX
NO5:
    MOV AX, TAB[22]
    MOV TAB[0], AX
NO6:
    MOV AX, TAB[18]
    MOV TAB[24], AX
NO7:
    MOV AX, TAB[24]
    MOV TAB[0], AX
NO8:
    MOV AX, TAB[0]
    MOV BX, 100
    IMUL BX
    MOV TAB[26], AX
NO9:
    MOV AX, TAB[0]
    MOV TAB[8], AX
NO10:
    MOV AX, TAB[8]
    MOV TAB[8], AX
NO11:
    MOV AX, TAB[14]
    MOV BX, 100
    IMUL BX
    MOV TAB[28], AX
NO12:
    MOV AX, TAB[28]
    MOV TAB[8], AX
NO13:
    MOV AX, TAB[18]
    MOV BX, 100
    IMUL BX
    MOV TAB[30], AX
NO14:
    MOV AX, TAB[30]
    MOV TAB[8], AX
NO15:
    MOV AX, TAB[0]
    AND AX, 0001H
    MOV TAB[32], AX
NO16:
    MOV AX, TAB[32]
    MOV TAB[14], AX
NO17:
    MOV AX, TAB[8]
    MOV TAB[34], AX
NO18:
    MOV AX, TAB[34]
    MOV TAB[14], AX
NO19:
    MOV AX, TAB[14]
    MOV TAB[14], AX
NO20:
    MOV AX, TAB[18]
    AND AX, 0001H
    MOV TAB[36], AX
NO21:
    MOV AX, TAB[36]
    MOV TAB[14], AX
NO22:
    MOV AX, TAB[0]
    MOV TAB[38], AX
NO23:
    MOV AX, TAB[38]
    MOV TAB[18], AX
NO24:
    MOV AX, TAB[8]
    MOV BX, 100
    IDIV BX
    MOV TAB[40], AX
NO25:
    MOV AX, TAB[40]
    MOV TAB[18], AX
NO26:
    MOV AX, TAB[14]
    MOV TAB[42], AX
NO27:
    MOV AX, TAB[42]
    MOV TAB[18], AX
NO28:
    MOV AX, TAB[18]
    MOV TAB[18], AX
NO29:
    MOV CX, 22
    MOV SI, 0

AGAIN:
    MOV AX,TAB[SI]
    CALL PrintAX
    CALL PRINTHC
    INC SI
    INC SI
    LOOP AGAIN
NO0:
    MOV AH,4CH
    INT 21H
PrintAX proc
    PUSH CX
    PUSH SI
    jmp Next


Next:
    mov si,offset Temp+3;保存存储结果的字符串的最后一个字符偏移地址
    xor cx,cx           ;对cX清零
    mov cl,4            ;设置循环次数为4次

MainPart:
    mov DH,AL           ;将Al的内容传送给DH

    shr AX,1
    shr AX,1
    shr AX,1
    shr AX,1
                ;上述4句为使AX逻辑右移4位 理论上可以写成 shr AX ,cl(cl设置为4)
                ;但这个地方cl要记录循环次数每次循环会是cl-1所以无法满足正常的移位需要
    and dh,0FH
    add dh,30H
    cmp dh,':'  ;':'的ASCII比9大1 而字母的ASCII码与数字的ASCII码中间隔了7个其它字符
    ja isLetter ;如果为字母则跳转
    jb No       ;如果不是

isLetter:
    add dh,7H   ;ASCII码加7变为字母
No:
    mov [si],dh ;将字符存入,待存放内容的字符串的对应位置

    dec si      ;待存放内容的内存地址自减1
loop MainPart

print:
    mov dx,offset Temp  ;将带打印的字符串的偏移地址存放进dx中
    mov ah,09           ;设置DOS 09号功能
    int 21H         ;功能调用

    POP SI
    POP CX

    ret
PrintAX endp


PRINTHC proc
    MOV DL, 10
    MOV AH, 2
    INT 21H
    RET
PRINTHC ENDP
    CODE ENDS
    END START
